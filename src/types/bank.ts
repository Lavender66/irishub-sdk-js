import { Coin, Msg } from './types';

/** @TODO document */
export class MsgSend implements Msg {
  type: string;
  value: {
    inputs: Input[];
    outputs: Output[];
  };

  constructor(inputs: Input[], outputs: Output[]) {
    this.type = 'irishub/bank/Send';
    this.value = {
      inputs: inputs,
      outputs: outputs,
    };
  }

  getSignBytes(): object {
    return this.value;
  }
}

export class MsgBurn implements Msg {
  type: string;
  value: {
    owner: string;
    coins: Coin[];
  };

  constructor(owner: string, coins: Coin[]) {
    this.type = 'irishub/bank/Burn';
    this.value = {
      owner: owner,
      coins: coins,
    };
  }

  getSignBytes(): object {
    return this;
  }
}

export class MsgSetMemoRegexp implements Msg {
  type: string;
  value: { owner: string; memo_regexp: string };
  constructor(owner: string, memoRegexp: string) {
    this.type = 'irishub/bank/SetMemoRegexp';
    this.value = {
      owner: owner,
      memo_regexp: memoRegexp,
    };
  }

  getSignBytes(): object {
    return this;
  }
}

/** @TODO document */
export interface InputOutput {
  /** Bech32 account address */
  address: string;
  coins: Coin[];
}

/** @TODO document */
export interface Input extends InputOutput {}

/** @TODO document */
export interface Output extends InputOutput {}

// Generated by https://quicktype.io

export interface TokenStats {
  loose_tokens: Coin[];
  bonded_tokens: Coin[];
  burned_tokens: Coin[];
  total_supply: Coin[];
}
